{"version":3,"file":"static/js/877.fb0dc06c.chunk.js","mappings":"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","sources":["helpers/handleGoogleSignUp.js","webpack://aquatrack/./src/components/signUpPage/SignUpForm/SignUpForm.module.css?9268","components/signUpPage/SignUpForm/SignUpForm.jsx","pages/SignUpPage.jsx","webpack://aquatrack/./src/shared/components/GoogleBtn/GoogleBtn.module.css?9da0","shared/components/GoogleBtn/GoogleBtn.jsx"],"sourcesContent":["import toast from 'react-hot-toast';\nimport { AXIOS_INSTANCE } from '../redux/constants';\n\nexport const handleGoogleSignUp = async () => {\n  try {\n    const response = await AXIOS_INSTANCE.get('users/get-oauth-url');\n    const { url } = response.data.data;\n    window.location.href = url;\n  } catch (error) {\n    toast.error('Error getting Google OAuth URL');\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"SignUpForm_layout__N7edf\",\"registerContainer\":\"SignUpForm_registerContainer__eYjbh\",\"title\":\"SignUpForm_title__K-Qox\",\"form\":\"SignUpForm_form__4DtFD\",\"field\":\"SignUpForm_field__Psf2U\",\"showPasswordBtn\":\"SignUpForm_showPasswordBtn__uLYV-\",\"icon\":\"SignUpForm_icon__2LLbR\",\"input\":\"SignUpForm_input__QW3T3\",\"submit\":\"SignUpForm_submit__+QNoq\",\"inviteOnLogIn\":\"SignUpForm_inviteOnLogIn__SXq9e\",\"inviteText\":\"SignUpForm_inviteText__JBVKJ\",\"link\":\"SignUpForm_link__oDand\",\"errorField\":\"SignUpForm_errorField__cmbsE\",\"errorsMessage\":\"SignUpForm_errorsMessage__yqUD3\",\"inputError\":\"SignUpForm_inputError__x5D-v\"};","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { register } from '../../../redux/auth/operations';\nimport { signUpFormSchema } from 'validationSchemas';\nimport { AuthFormLayout, Icon } from 'shared';\nimport clsx from 'clsx';\nimport css from './SignUpForm.module.css';\nimport { handleGoogleSignUp } from 'helpers/handleGoogleSignUp';\nimport GoogleBtn from 'shared/components/GoogleBtn/GoogleBtn';\nimport { useModal } from '../../../context';\nimport { SuccessfullySendEmail } from '../..';\nimport { showOnboarding } from '../../../redux/auth/slice';\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n  const { openModal } = useModal();\n  const [showPassword, setShowPassword] = useState(false);\n  const {\n    register: registerField,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(signUpFormSchema),\n    mode: 'onSubmit',\n  });\n\n  const onSubmit = data => {\n    const { email, password } = data;\n    const newEmail = email.toLowerCase();\n    dispatch(register({ email: newEmail, password }));\n    reset();\n    openModal(<SuccessfullySendEmail email={email} />);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <AuthFormLayout className={css.layout}>\n      <div className={css.registerContainer}>\n        <h2 className={css.title}>Sign Up</h2>\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\n          <label\n            className={clsx(css.field, { [css.errorField]: errors.email })}\n          >\n            Email\n            <input\n              className={clsx(css.input, { [css.inputError]: errors.email })}\n              placeholder=\"Enter your email\"\n              {...registerField('email', {\n                required: true,\n              })}\n            />\n          </label>\n          {errors.email && (\n            <p className={css.errorsMessage}>{errors.email.message}</p>\n          )}\n\n          <label\n            className={clsx(css.field, { [css.errorField]: errors.password })}\n          >\n            Password\n            <input\n              className={clsx(css.input, { [css.inputError]: errors.password })}\n              type={showPassword ? 'text' : 'password'}\n              placeholder=\"Enter your password\"\n              {...registerField('password', { required: true })}\n            />\n            <button\n              className={css.showPasswordBtn}\n              type=\"button\"\n              onClick={handleClickShowPassword}\n            >\n              {showPassword ? (\n                <Icon className={css.icon} iconId=\"icon-eye-off\" />\n              ) : (\n                <Icon className={css.icon} iconId=\"icon-eye\" />\n              )}\n            </button>\n          </label>\n          {errors.password && (\n            <p className={css.errorsMessage}>\n              {'must contain at least 8 characters'}\n            </p>\n          )}\n\n          <label\n            className={clsx(css.field, {\n              [css.errorField]: errors.confirmPassword,\n            })}\n          >\n            Repeat password\n            <input\n              className={clsx(css.input, {\n                [css.inputError]: errors.confirmPassword,\n              })}\n              type={showPassword ? 'text' : 'password'}\n              placeholder=\"Repeat password\"\n              {...registerField('confirmPassword', { required: true })}\n            />\n            <button\n              className={css.showPasswordBtn}\n              type=\"button\"\n              onClick={handleClickShowPassword}\n            >\n              {showPassword ? (\n                <Icon className={css.icon} iconId=\"icon-eye-off\" />\n              ) : (\n                <Icon className={css.icon} iconId=\"icon-eye\" />\n              )}\n            </button>\n          </label>\n          {errors.confirmPassword && (\n            <p className={css.errorsMessage}>{'password does not match'}</p>\n          )}\n\n          <input className={css.submit} type=\"submit\" value=\"Sign Up\" />\n        </form>\n\n        <GoogleBtn\n          context={'Sign Up with Google'}\n          onClick={() => {\n            handleGoogleSignUp();\n            dispatch(showOnboarding(true));\n          }}\n        />\n\n        <div className={css.inviteOnLogIn}>\n          <p className={css.inviteText}>Already have account?</p>\n          <Link className={css.link} to=\"/signin\">\n            Sign In\n          </Link>\n        </div>\n      </div>\n    </AuthFormLayout>\n  );\n};\n\nexport default SignUpForm;\n","import { Container, Logo, Section } from 'shared';\nimport { AdvantagesSection } from 'components';\nimport SignUpForm from 'components/signUpPage/SignUpForm/SignUpForm';\n\n\nconst SignUpPage = () => {\n\n  return (\n    <Section>\n      <Container>\n        <Logo />\n        <SignUpForm />\n        <AdvantagesSection className=\"signUpPage\" />\n      </Container>\n    </Section>\n  );\n};\n\nexport default SignUpPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"icon_google\":\"GoogleBtn_icon_google__WMmJL\",\"google_btn\":\"GoogleBtn_google_btn__+WD4M\"};","import { FcGoogle } from 'react-icons/fc';\nimport { Button } from 'shared';\nimport css from './GoogleBtn.module.css';\n\nconst GoogleBtn = ({ context, onClick }) => {\n  return (\n    <Button className={css.google_btn} onClick={onClick}>\n      <FcGoogle className={css.icon_google} />\n      {context}\n    </Button>\n  );\n};\n\nexport default GoogleBtn;\n"],"names":["handleGoogleSignUp","async","response","AXIOS_INSTANCE","url","data","window","location","href","error","toast","SignUpForm","dispatch","useDispatch","openModal","useModal","showPassword","setShowPassword","useState","register","registerField","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","signUpFormSchema","mode","handleClickShowPassword","_jsx","AuthFormLayout","className","css","children","_jsxs","onSubmit","email","password","newEmail","toLowerCase","SuccessfullySendEmail","clsx","placeholder","required","message","type","onClick","Icon","iconId","confirmPassword","value","GoogleBtn","context","showOnboarding","Link","to","SignUpPage","Section","Container","Logo","AdvantagesSection","_ref","Button","FcGoogle"],"sourceRoot":""}